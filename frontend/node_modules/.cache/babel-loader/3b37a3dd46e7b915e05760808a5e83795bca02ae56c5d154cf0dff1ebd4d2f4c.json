{"ast":null,"code":"function wrapTestFunction(fn, consoleMethodName) {\n  return function () {\n    var _this = this;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var spy = jest.spyOn(console, consoleMethodName);\n    spy.mockImplementation(function () {});\n    return new Promise(function (resolve) {\n      resolve(fn === null || fn === void 0 ? void 0 : fn.apply(_this, args));\n    }).finally(function () {\n      expect(spy).toMatchSnapshot();\n      spy.mockReset();\n    });\n  };\n}\n/** @deprecated This method will be removed in the next major version of Apollo Client */\nexport function withErrorSpy(it) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  args[1] = wrapTestFunction(args[1], \"error\");\n  return it.apply(void 0, args);\n}\n/** @deprecated This method will be removed in the next major version of Apollo Client */\nexport function withWarningSpy(it) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  args[1] = wrapTestFunction(args[1], \"warn\");\n  return it.apply(void 0, args);\n}\n/** @deprecated This method will be removed in the next major version of Apollo Client */\nexport function withLogSpy(it) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  args[1] = wrapTestFunction(args[1], \"log\");\n  return it.apply(void 0, args);\n}","map":{"version":3,"names":["wrapTestFunction","fn","consoleMethodName","_this","args","_i","arguments","length","spy","jest","spyOn","console","mockImplementation","Promise","resolve","apply","finally","expect","toMatchSnapshot","mockReset","withErrorSpy","it","withWarningSpy","withLogSpy"],"sources":["C:\\Users\\Simon\\IdeaProjects\\movie-theater-ticket-reservation\\frontend\\node_modules\\@apollo\\src\\testing\\core\\withConsoleSpy.ts"],"sourcesContent":["function wrapTestFunction(\n  fn: (...args: any[]) => any,\n  consoleMethodName: \"log\" | \"warn\" | \"error\"\n) {\n  return function (this: any, ...args: any[]) {\n    const spy = jest.spyOn(console, consoleMethodName);\n    spy.mockImplementation(() => {});\n    return new Promise((resolve) => {\n      resolve(fn?.apply(this, args));\n    }).finally(() => {\n      expect(spy).toMatchSnapshot();\n      spy.mockReset();\n    });\n  };\n}\n\n/** @deprecated This method will be removed in the next major version of Apollo Client */\nexport function withErrorSpy<TArgs extends any[], TResult>(\n  it: (...args: TArgs) => TResult,\n  ...args: TArgs\n) {\n  args[1] = wrapTestFunction(args[1], \"error\");\n  return it(...args);\n}\n\n/** @deprecated This method will be removed in the next major version of Apollo Client */\nexport function withWarningSpy<TArgs extends any[], TResult>(\n  it: (...args: TArgs) => TResult,\n  ...args: TArgs\n) {\n  args[1] = wrapTestFunction(args[1], \"warn\");\n  return it(...args);\n}\n\n/** @deprecated This method will be removed in the next major version of Apollo Client */\nexport function withLogSpy<TArgs extends any[], TResult>(\n  it: (...args: TArgs) => TResult,\n  ...args: TArgs\n) {\n  args[1] = wrapTestFunction(args[1], \"log\");\n  return it(...args);\n}\n"],"mappings":"AAAA,SAASA,gBAAgBA,CACvBC,EAA2B,EAC3BC,iBAA2C;EAE3C,OAAO;IAAA,IAAAC,KAAA;IAAqB,IAAAC,IAAA;SAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;MAAdD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;IAC1B,IAAMG,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACC,OAAO,EAAET,iBAAiB,CAAC;IAClDM,GAAG,CAACI,kBAAkB,CAAC,aAAO,CAAC,CAAC;IAChC,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO;MACzBA,OAAO,CAACb,EAAE,aAAFA,EAAE,uBAAFA,EAAE,CAAEc,KAAK,CAACZ,KAAI,EAAEC,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,CAACY,OAAO,CAAC;MACTC,MAAM,CAACT,GAAG,CAAC,CAACU,eAAe,EAAE;MAC7BV,GAAG,CAACW,SAAS,EAAE;IACjB,CAAC,CAAC;EACJ,CAAC;AACH;AAEA;AACA,OAAM,SAAUC,YAAYA,CAC1BC,EAA+B;EAC/B,IAAAjB,IAAA;OAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;IAAdD,IAAA,CAAAC,EAAA,QAAAC,SAAA,CAAAD,EAAA;;EAEAD,IAAI,CAAC,CAAC,CAAC,GAAGJ,gBAAgB,CAACI,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;EAC5C,OAAOiB,EAAE,CAAAN,KAAA,SAAIX,IAAI;AACnB;AAEA;AACA,OAAM,SAAUkB,cAAcA,CAC5BD,EAA+B;EAC/B,IAAAjB,IAAA;OAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;IAAdD,IAAA,CAAAC,EAAA,QAAAC,SAAA,CAAAD,EAAA;;EAEAD,IAAI,CAAC,CAAC,CAAC,GAAGJ,gBAAgB,CAACI,IAAI,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC;EAC3C,OAAOiB,EAAE,CAAAN,KAAA,SAAIX,IAAI;AACnB;AAEA;AACA,OAAM,SAAUmB,UAAUA,CACxBF,EAA+B;EAC/B,IAAAjB,IAAA;OAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;IAAdD,IAAA,CAAAC,EAAA,QAAAC,SAAA,CAAAD,EAAA;;EAEAD,IAAI,CAAC,CAAC,CAAC,GAAGJ,gBAAgB,CAACI,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;EAC1C,OAAOiB,EAAE,CAAAN,KAAA,SAAIX,IAAI;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}